services:
  
  db:
    build: ./db
    container_name: operations_db
    restart: always
    environment: 
      POSTGRES_USER: unicorn_admin
      POSTGRES_PASSWORD: unicorn_password
      POSTGRES_DB: operations
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data

  flight_data_gen:
    build: ./flight_generator
    container_name: flight_data_gen
    restart: "no"
    depends_on:
      - db
    environment:
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_HOST=${DB_HOST}
      - DB_PORT=${DB_PORT}
      - DB_NAME=${DB_NAME}

  flight_status_data_gen:
    build: ./flight_status_data_gen
    container_name: flight_status_data_gen
    restart: always
    depends_on:
      - flight_data_gen
    volumes:
      - shared_data:/shared_data
    environment:
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_HOST=${DB_HOST}
      - DB_PORT=${DB_PORT}
      - DB_NAME=${DB_NAME}

  flight_status_data_extract:
    build: ./flight_status_data_extract
    container_name: flight_status_data_extract
    restart: always
    depends_on:
      - flight_status_data_gen
    volumes:
      - shared_data:/shared_data
    environment:
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_HOST=${DB_HOST}
      - DB_PORT=${DB_PORT}
      - DB_NAME=${DB_NAME}

  booking_data_gen:
    build: ./flight_booking_mock
    container_name: booking_data_gen
    restart: "no"
    depends_on:
      - flight_data_gen
    environment:
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_HOST=${DB_HOST}
      - DB_PORT=${DB_PORT}
      - DB_NAME=${DB_NAME}
      
  flight_status_api:
    build: ./flight_status_api
    container_name: flight_status_api
    ports:
      - "8000:8000"
    depends_on:
      - flight_status_data_extract
    environment:
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_HOST=${DB_HOST}
      - DB_PORT=${DB_PORT}
      - DB_NAME=${DB_NAME}

  internal_dashboard:
    build:
      context: ./internal_dashboard
    container_name: internal_dashboard
    ports:
      - "8501:8501"
    depends_on:
      - flight_status_api
    environment:
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_HOST=${DB_HOST}
      - DB_PORT=${DB_PORT}
      - DB_NAME=${DB_NAME}

  airport_dashboard:
    build:
      context: ./airport_dashboard
    container_name: airport_dashboard
    ports:
      - "8502:8502"
    depends_on:
      - flight_status_data_extract
  
  kafka:
    image: docker.io/bitnami/kafka:3.4
    hostname: kafka
    ports:
      - "9092:9092"
      - "9094:9094"
    volumes:
      - "kafka_data:/bitnami"
    environment:
      - KAFKA_ENABLE_KRAFT=yes
      - KAFKA_CFG_PROCESS_ROLES=broker,controller
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093,EXTERNAL://:9094
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,EXTERNAL:PLAINTEXT
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092,EXTERNAL://kafka:9094
      - KAFKA_BROKER_ID=1
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=1@127.0.0.1:9093
      - ALLOW_PLAINTEXT_LISTENER=yes
      - KAFKA_CFG_NODE_ID=1
      - KAFKA_AUTO_CREATE_TOPICS_ENABLE=true
      - BITNAMI_DEBUG=yes
      - KAFKA_CFG_NUM_PARTITIONS=2

  ksqldb-server:
    image: confluentinc/cp-ksqldb-server:latest
    container_name: ksqldb-server
    depends_on:
      - kafka
    environment:
      KSQL_CONFIG_DIR: "/etc/ksql"
      KSQL_BOOTSTRAP_SERVERS: "kafka:9092"
      KSQL_LISTENERS: "http://0.0.0.0:8088"
    ports:
      - "8088:8088"

  ksqldb-cli:
    image: confluentinc/cp-ksqldb-cli:latest
    container_name: ksqldb-cli
    depends_on:
      - ksqldb-server
    entrypoint: /bin/sh
    tty: true

  kafka_producer:
    build: ./kafka_producer
    container_name: kafka_producer
    restart: always
    depends_on:
      - kafka


  # customer_notifier:
  #   build: ./customer_notifier
  #   container_name: customer_notifier
  #   depends_on:
  #     - flight_status_api
  #   environment:
  #     - DB_USER=${DB_USER}
  #     - DB_PASSWORD=${DB_PASSWORD}
  #     - DB_HOST=${DB_HOST}
  #     - DB_PORT=${DB_PORT}
  #     - DB_NAME=${DB_NAME}

  kafka-ui:
      image: provectuslabs/kafka-ui
      container_name: kafka-ui
      ports:
        - "8080:8080"
      environment:
        KAFKA_CLUSTERS_0_NAME: local
        KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9092

volumes:
  postgres_data:
  shared_data:
  kafka_data: