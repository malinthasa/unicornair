services:
  
  db:
    build: ./db
    container_name: operations_db
    restart: always
    environment: 
      POSTGRES_USER: unicorn_admin
      POSTGRES_PASSWORD: unicorn_password
      POSTGRES_DB: operations
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data

  # flight_data_gen:
  #   build: ./flight_generator
  #   container_name: flight_data_gen
  #   restart: "no"
  #   depends_on:
  #     - db
  #   environment:
  #     - DB_USER=${DB_USER}
  #     - DB_PASSWORD=${DB_PASSWORD}
  #     - DB_HOST=${DB_HOST}
  #     - DB_PORT=${DB_PORT}
  #     - DB_NAME=${DB_NAME}

  # flight_status_data_gen:
  #   build: ./flight_status_data_gen
  #   container_name: flight_status_data_gen
  #   restart: always
  #   depends_on:
  #     - flight_data_gen
  #   volumes:
  #     - shared_data:/shared_data
  #   environment:
  #     - DB_USER=${DB_USER}
  #     - DB_PASSWORD=${DB_PASSWORD}
  #     - DB_HOST=${DB_HOST}
  #     - DB_PORT=${DB_PORT}
  #     - DB_NAME=${DB_NAME}

  # flight_status_data_extract:
  #   build: ./flight_status_data_extract
  #   container_name: flight_status_data_extract
  #   restart: always
  #   depends_on:
  #     - flight_status_data_gen
  #   volumes:
  #     - shared_data:/shared_data
  #   environment:
  #     - DB_USER=${DB_USER}
  #     - DB_PASSWORD=${DB_PASSWORD}
  #     - DB_HOST=${DB_HOST}
  #     - DB_PORT=${DB_PORT}
  #     - DB_NAME=${DB_NAME}

  # booking_data_gen:
  #   build: ./flight_booking_mock
  #   container_name: booking_data_gen
  #   restart: "no"
  #   depends_on:
  #     - flight_data_gen
  #   environment:
  #     - DB_USER=${DB_USER}
  #     - DB_PASSWORD=${DB_PASSWORD}
  #     - DB_HOST=${DB_HOST}
  #     - DB_PORT=${DB_PORT}
  #     - DB_NAME=${DB_NAME}
      
  # flight_status_api:
  #   build: ./flight_status_api
  #   container_name: flight_status_api
  #   ports:
  #     - "8000:8000"
  #   depends_on:
  #     - flight_status_data_extract
  #   environment:
  #     - DB_USER=${DB_USER}
  #     - DB_PASSWORD=${DB_PASSWORD}
  #     - DB_HOST=${DB_HOST}
  #     - DB_PORT=${DB_PORT}
  #     - DB_NAME=${DB_NAME}

  # internal_dashboard:
  #   build:
  #     context: ./internal_dashboard
  #   container_name: internal_dashboard
  #   ports:
  #     - "8501:8501"
  #   depends_on:
  #     - flight_status_api
  #   environment:
  #     - DB_USER=${DB_USER}
  #     - DB_PASSWORD=${DB_PASSWORD}
  #     - DB_HOST=${DB_HOST}
  #     - DB_PORT=${DB_PORT}
  #     - DB_NAME=${DB_NAME}

  # airport_dashboard:
  #   build:
  #     context: ./airport_dashboard
  #   container_name: airport_dashboard
  #   ports:
  #     - "8502:8502"
  #   depends_on:
  #     - flight_status_data_extract

  # Kafka cluster
  kafka:
    image: confluentinc/cp-kafka:latest
    hostname: kafka
    container_name: kafka
    ports:
      - "9092:9092"
      - "9093:9093"
    environment:
      KAFKA_KRAFT_MODE: "true"
      KAFKA_PROCESS_ROLES: controller,broker
      KAFKA_NODE_ID: 1
      KAFKA_CONTROLLER_QUORUM_VOTERS: "1@localhost:9093"
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092,CONTROLLER://0.0.0.0:9093
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,CONTROLLER:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_LOG_DIRS: /var/lib/kafka/data
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_LOG_RETENTION_HOURS: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      CLUSTER_ID: "Mk3OEYBSD34fcwNTJENDM2Qk"
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1

      
    volumes:
      - kafka-data:/var/lib/kafka/data

  ksqldb-server:
    image: confluentinc/cp-ksqldb-server:latest
    container_name: ksqldb-server
    depends_on:
      - kafka
    environment:
      KSQL_CONFIG_DIR: "/etc/ksql"
      KSQL_BOOTSTRAP_SERVERS: "kafka:9092"
      KSQL_LISTENERS: "http://0.0.0.0:8088"
    ports:
      - "8088:8088"

  ksqldb-cli:
    image: confluentinc/cp-ksqldb-cli:latest
    container_name: ksqldb-cli
    depends_on:
      - ksqldb-server
    entrypoint: /bin/sh
    tty: true

  kafka_producer:
    build: ./kafka_producer
    container_name: kafka_producer
    restart: always
    depends_on:
      - kafka


  # customer_notifier:
  #   build: ./customer_notifier
  #   container_name: customer_notifier
  #   depends_on:
  #     - flight_status_api
  #   environment:
  #     - DB_USER=${DB_USER}
  #     - DB_PASSWORD=${DB_PASSWORD}
  #     - DB_HOST=${DB_HOST}
  #     - DB_PORT=${DB_PORT}
  #     - DB_NAME=${DB_NAME}

volumes:
  postgres_data:
  shared_data:
  kafka-data: